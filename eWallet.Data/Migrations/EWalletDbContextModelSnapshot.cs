// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eWallet.Data.EF;

#nullable disable

namespace eWallet.Data.Migrations
{
    [DbContext(typeof(EWalletDbContext))]
    partial class EWalletDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("ba9a22f7-4843-4638-8b9b-ba3241973892"),
                            RoleId = new Guid("1083fdbe-1f26-4aa6-bddc-d06fa6bc523e")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserUserTokens", (string)null);
                });

            modelBuilder.Entity("eWallet.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1083fdbe-1f26-4aa6-bddc-d06fa6bc523e"),
                            ConcurrencyStamp = "76afc48e-333e-4520-8cf7-b88b42ca9400",
                            Description = "Administrator role",
                            Name = "admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("eWallet.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FristName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba9a22f7-4843-4638-8b9b-ba3241973892"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8a8b276-712a-46cf-b7da-9205a3cacc7e",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "some-admin-email@nonce.fake",
                            EmailConfirmed = true,
                            FristName = "Administrator",
                            LastName = "Role",
                            LockoutEnabled = false,
                            NormalizedEmail = "some-admin-email@nonce.fake",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEGSMw/g30t9TEqgKg6tyzlUsMAylbkUFHvbYqNhuAbUGRg75iNJ73QGrtmwicDGzNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("eWallet.Data.Entities.Buyer", b =>
                {
                    b.Property<string>("BuyerId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("buyerId");

                    b.Property<decimal?>("Amount")
                        .HasMaxLength(30)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("Password")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("BuyerId");

                    b.HasIndex("UserId");

                    b.ToTable("Buyers", (string)null);

                    b.HasData(
                        new
                        {
                            BuyerId = "default",
                            Amount = 0m,
                            Password = "default",
                            UserId = new Guid("ba9a22f7-4843-4638-8b9b-ba3241973892"),
                            Username = "default"
                        },
                        new
                        {
                            BuyerId = "buyer001",
                            Amount = 0m,
                            Password = "admin",
                            UserId = new Guid("ba9a22f7-4843-4638-8b9b-ba3241973892"),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("eWallet.Data.Entities.ConfirmOrderRequest", b =>
                {
                    b.Property<int>("CorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("corId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CorId"));

                    b.Property<string>("PayUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("payUrl");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("signature");

                    b.Property<int>("StatusCode")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasColumnName("statusCode");

                    b.Property<string>("TransId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("transId");

                    b.HasKey("CorId");

                    b.HasIndex("TransId")
                        .IsUnique()
                        .HasFilter("[transId] IS NOT NULL");

                    b.ToTable("ConfirmOderRequests", (string)null);
                });

            modelBuilder.Entity("eWallet.Data.Entities.Merchant", b =>
                {
                    b.Property<string>("ShopId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("shopId");

                    b.Property<string>("AccessKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("accessKey");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Amount")
                        .HasMaxLength(30)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("MerchantName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NotifyUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReturnUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerectKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("serectKey");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ShopId");

                    b.HasIndex("UserId");

                    b.ToTable("Merchants", (string)null);

                    b.HasData(
                        new
                        {
                            ShopId = "admin",
                            AccessKey = "xUHfoPq35RGAHSJvuNc4AfR3YJ6RsTHG",
                            Address = "",
                            Amount = 0m,
                            MerchantName = "admin",
                            NotifyUrl = "https://localhost:7299/Pay/NotifyURL",
                            ReturnUrl = "https://localhost:7299/Pay/ReturnURL",
                            SerectKey = "xUHfoPq35RGAHSJvuNc4AfR3YJ6RsTHG",
                            UserId = new Guid("ba9a22f7-4843-4638-8b9b-ba3241973892")
                        });
                });

            modelBuilder.Entity("eWallet.Data.Entities.OrderPaymentReceipt", b =>
                {
                    b.Property<int>("OprId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("oprId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OprId"));

                    b.Property<decimal?>("Amount")
                        .HasMaxLength(30)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("ResponseTime")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("responseTime");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("signature");

                    b.Property<int?>("StatusCode")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasColumnName("statusCode");

                    b.Property<string>("TransId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("transId");

                    b.HasKey("OprId");

                    b.HasIndex("TransId")
                        .IsUnique()
                        .HasFilter("[transId] IS NOT NULL");

                    b.ToTable("OrderPaymentReceipts", (string)null);
                });

            modelBuilder.Entity("eWallet.Data.Entities.OrderRequest", b =>
                {
                    b.Property<string>("TransId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("transId");

                    b.Property<decimal>("Amount")
                        .HasMaxLength(30)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("OderInfo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("oderInfo");

                    b.Property<string>("ResponseTime")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("responseTime");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("shopId");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("signature");

                    b.HasKey("TransId");

                    b.HasIndex("ShopId");

                    b.ToTable("OderRequests", (string)null);
                });

            modelBuilder.Entity("eWallet.Data.Entities.PaymentRequest", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal?>("Amount")
                        .HasMaxLength(30)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("BuyerId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("buyerId");

                    b.Property<string>("ResponseTime")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("responseTime");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("signature");

                    b.Property<string>("TransId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("transId");

                    b.HasKey("PaymentId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("TransId")
                        .IsUnique()
                        .HasFilter("[transId] IS NOT NULL");

                    b.ToTable("PaymentRequests", (string)null);
                });

            modelBuilder.Entity("eWallet.Data.Entities.Buyer", b =>
                {
                    b.HasOne("eWallet.Data.Entities.AppUser", "AppUser")
                        .WithMany("Buyers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Buyer_AppUser");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("eWallet.Data.Entities.ConfirmOrderRequest", b =>
                {
                    b.HasOne("eWallet.Data.Entities.OrderRequest", "Trans")
                        .WithOne("ConfirmOderRequests")
                        .HasForeignKey("eWallet.Data.Entities.ConfirmOrderRequest", "TransId")
                        .HasConstraintName("FK_ConfirmOderRequest_OderRequest");

                    b.Navigation("Trans");
                });

            modelBuilder.Entity("eWallet.Data.Entities.Merchant", b =>
                {
                    b.HasOne("eWallet.Data.Entities.AppUser", "AppUser")
                        .WithMany("Merchants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Merchant_AppUser");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("eWallet.Data.Entities.OrderPaymentReceipt", b =>
                {
                    b.HasOne("eWallet.Data.Entities.OrderRequest", "Trans")
                        .WithOne("OrderPaymentReceipts")
                        .HasForeignKey("eWallet.Data.Entities.OrderPaymentReceipt", "TransId")
                        .HasConstraintName("FK_OrderPaymentReceipt_OderRequest");

                    b.Navigation("Trans");
                });

            modelBuilder.Entity("eWallet.Data.Entities.OrderRequest", b =>
                {
                    b.HasOne("eWallet.Data.Entities.Merchant", "Shop")
                        .WithMany("OderRequests")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OderRequest_Merchant");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("eWallet.Data.Entities.PaymentRequest", b =>
                {
                    b.HasOne("eWallet.Data.Entities.Buyer", "Buyer")
                        .WithMany("PaymentRequests")
                        .HasForeignKey("BuyerId")
                        .HasConstraintName("FK_PaymentRequest_Buyer");

                    b.HasOne("eWallet.Data.Entities.OrderRequest", "Trans")
                        .WithOne("PaymentRequests")
                        .HasForeignKey("eWallet.Data.Entities.PaymentRequest", "TransId")
                        .HasConstraintName("FK_PaymentRequest_OderRequest");

                    b.Navigation("Buyer");

                    b.Navigation("Trans");
                });

            modelBuilder.Entity("eWallet.Data.Entities.AppUser", b =>
                {
                    b.Navigation("Buyers");

                    b.Navigation("Merchants");
                });

            modelBuilder.Entity("eWallet.Data.Entities.Buyer", b =>
                {
                    b.Navigation("PaymentRequests");
                });

            modelBuilder.Entity("eWallet.Data.Entities.Merchant", b =>
                {
                    b.Navigation("OderRequests");
                });

            modelBuilder.Entity("eWallet.Data.Entities.OrderRequest", b =>
                {
                    b.Navigation("ConfirmOderRequests");

                    b.Navigation("OrderPaymentReceipts");

                    b.Navigation("PaymentRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
